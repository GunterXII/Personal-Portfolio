import { Progetto } from './progetto.js';

const progetti=[
    new Progetto("TODO-LIST","Ho sviluppato un'applicazione web di gestione attività (to-do calendar) interattiva, scritta in JavaScript puro, che permette di:Visualizzare un calendario dinamico con task giornalieri, con dati salvati e aggiornabili in tempo reale.Aggiungere nuove attività tramite un form con animazioni di entrata/uscita fluide per migliorare l’esperienza utente.Visualizzare i dettagli di ogni attività con animazioni di transizione tra calendario e scheda dettagliata.Modificare task direttamente nel dettaglio tramite editing inline (doppio click), con salvataggio aggiornato nel calendario.Eliminare attività con animazioni di uscita.Gestire una lista separata di task “importanti” con aggiunta e rimozione dinamica, accompagnata da animazioni visive (stellina animata).Visualizzare una sezione dedicata alle attività della giornata attuale, con controllo dinamico della data e messaggi informativi.Aggiornare in tempo reale un orologio digitale nella pagina.Il codice mostra una solida conoscenza di:Manipolazione avanzata del DOM con selettori unici e querySelector.Gestione dello stato e interazioni tramite eventi.Uso efficace di dataset per mantenere dati associati agli elementi HTML.Tecniche di animazione CSS integrate tramite classList e gestione di eventi animationend.Struttura modulare del codice per chiarezza e manutenzione.Questo progetto dimostra capacità di creare interfacce utente dinamiche, intuitive e performanti senza dipendere da librerie esterne, enfatizzando attenzione al dettaglio UX e best practice di sviluppo frontend.","img/todo.png","progetti-portfolio/TODO/index.html"),
    
    new Progetto("Libreria","Sviluppato una semplice web app per la gestione di una libreria personale, che permette di aggiungere, modificare, ordinare e rimuovere libri. Il progetto include funzionalità di salvataggio locale con localStorage, interazioni tramite drag & drop per riordinare gli elementi, editing inline dei dati, e un sistema di valutazione tramite stelle. Ho curato anche animazioni e gestione degli eventi per migliorare l’esperienza utente.","img/libreria.png","progetti-portfolio/libreria/libreria.html"),

     new Progetto("App Meteo con API","Ho sviluppato una semplice applicazione web in JavaScript che consente all’utente di inserire il nome di una città e ottenere la temperatura attuale in tempo reale.Funzionalità principali:Riceve input dall’utente (nome città).Usa l’API di Nominatim (OpenStreetMap) per ottenere le coordinate geografiche (latitudine e longitudine) della città inserita.Con queste coordinate, effettua una chiamata all’API di Open-Meteo per recuperare la temperatura oraria.Visualizza la temperatura attuale nella pagina, gestendo errori come città non trovata o problemi di rete.Tecnologie utilizzate: JavaScript moderno (async/await, fetch API), manipolazione DOM, gestione errori.Obiettivi raggiunti:Integrazione di più API esterne in modo asincrono.Gestione efficiente dell’input utente e dei casi di errore.Aggiornamento dinamico del contenuto della pagina senza ricaricare.Questo progetto dimostra capacità di lavorare con API REST, gestione asincrona, e sviluppo front-end interattivo.","img/meteo.png","progetti-portfolio/weather-app/index.html"),
    new Progetto
    
    ('Bottone Incliccabile', 'Progettata per dimostrare abilità avanzate di manipolazione DOM e gestione eventi, questa app interattiva presenta un bottone dinamico che si sposta e cambia colore in modo casuale, sfidando l’utente a cliccarlo il più possibile. Il progetto evidenzia competenze pratiche in JavaScript puro, tra cui gestione degli eventi, calcoli dinamici di posizionamento e aggiornamento in tempo reale dell’interfaccia utente. Il sistema di punteggio con reset integrato mostra attenzione all’usabilità e alla UX.', "img/borrone incliccabile.png", 'progetti-portfolio/bottone-incliccabile/startinggame.html'),
    
    new Progetto("Calcolatrice","Questa calcolatrice web è stata realizzata con cura per offrire un’esperienza fluida e precisa. Gestisce correttamente operazioni aritmetiche di base, inclusi numeri decimali e la prevenzione di errori come la divisione per zero. Ho implementato una logica chiara per la gestione degli input e degli eventi, assicurando aggiornamenti in tempo reale del display. È un progetto che dimostra le mie capacità nel scrivere codice pulito, mantenibile e attento all’usabilità, ideale come base per sviluppi futuri.","img/calcolatrice.png","progetti-portfolio/calculator/calculator.html"),
    new Progetto("tic-tac-toe","Questo progetto è un gioco di Tris (tic-tac-toe) sviluppato in JavaScript puro, pensato per offrire un’interfaccia interattiva e visivamente coinvolgente. Ho implementato tutte le funzionalità chiave: gestione dinamica dei turni, evidenziazione del giocatore attivo, controllo completo delle combinazioni vincenti e gestione dei pareggi. Il codice è strutturato in modo modulare e pulito, con animazioni fluide per la linea di vittoria e un sistema di punteggio aggiornato in tempo realemPer migliorare l’efficienza e rifinire la logica, ho avuto il supporto di un’AI che mi ha aiutato a ottimizzare la gestione degli eventi e la chiarezza del codice, mantenendo sempre un occhio attento alla qualità e alla manutenibilità. Questo progetto dimostra le mie capacità di scrivere codice funzionale, intuitivo e di integrare strumenti innovativi nel mio flusso di lavoro.","img/tic tac toe.png","progetti-portfolio/tictactoe/tictactoe.html"),
    
    new Progetto("Indovina Il Numero","Ho realizzato un semplice gioco di \"indovina il numero\" in JavaScript. L’utente deve indovinare un numero casuale da 1 a 100 inserendolo in un campo di input. Il sistema fornisce feedback colorati e messaggi in base alla distanza dal numero corretto, mostra lo storico dei tentativi e consente di ricominciare una volta indovinato. Ho implementato anche controlli di validazione e disabilitato l’input al termine del gioco.","img/numero magico.png","progetti-portfolio/numero-magico/numeromagico.html"),

    new Progetto("ETCH-A-SKETCH","Ho sviluppato una semplice applicazione web che genera una griglia personalizzabile di quadratini su cui è possibile disegnare passando il mouse.La griglia è dinamica e può essere ridimensionata dall’utente tra 2 e 100 quadrati per lato.Ho implementato funzionalità per cambiare il colore del \“pennello\” (colore fisso o casuale) e per abilitare/disabilitare il disegno con un clic.Il codice è scritto in JavaScript puro, con attenzione alla modularità e alla gestione degli eventi DOM.Ho inoltre curato l’usabilità tramite messaggi visivi che indicano la modalità attiva.","img/sketch.png","progetti-portfolio/etch-a-sketch/sketch.html"),
    new Progetto("Orologio Analitico","Ho realizzato un orologio analogico interattivo utilizzando JavaScript puro e manipolazione del DOM.Il progetto si basa su un tutorial che ho seguito per apprendere le tecniche di aggiornamento continuo degli elementi grafici tramite setInterval e trasformazioni CSS.L’orologio aggiorna in tempo reale la posizione delle lancette delle ore, minuti e secondi calcolando la rotazione corretta in gradi.Ho implementato una funzione modulare per gestire la rotazione delle lancette, migliorando la chiarezza e la manutenzione del codice.","img/orologio.png","progetti-portfolio/clock/clock.html"),

    new Progetto("Dashboard","Ho realizzato una dashboard moderna e responsive utilizzando HTML semantico e CSS per lo stile.La struttura è composta da un menu laterale con icone SVG e voci di navigazione, una barra di ricerca funzionale e un’area principale che mostra diversi widget di progetto.Ho curato l’organizzazione del layout con container flessibili e griglie per garantire una buona esperienza utente su vari dispositivi.Il progetto riflette attenzione al design visivo e all’usabilità, con elementi come bottoni, icone, e testi ben bilanciati.","img/dashbpard.png","progetti-portfolio/dashboard/dashboard.html"),

    new Progetto("Mood Tracker","Ho sviluppato una semplice web app interattiva che rileva e traccia l’umore dell’utente basandosi su un input testuale. Il sistema utilizza espressioni regolari per identificare emozioni di felicità o tristezza nel testo inserito, assegnando un valore numerico all’umore. Questo valore viene visualizzato in tempo reale su un grafico a linee creato con Chart.js, mostrando l’andamento degli stati d’animo nei vari tentativi.La UI è dinamica e personalizzata con un saluto che varia in base all’ora del giorno e al nome utente salvato nel localStorage. Inoltre, l’app fornisce risposte motivate o di conforto basate sul sentimento rilevato, migliorando l’interazione e l’esperienza utente.","img/mood.png","progetti-portfolio/AI-mood-tracker/nome.html"),
    
   
    new Progetto("Quizz App","Ho realizzato una web app per creare e svolgere quiz interattivi con timer e gestione delle risposte corrette. Nel processo di sviluppo, ho utilizzato un assistente AI per migliorare la struttura del codice, ottimizzare la logica di gestione dei quiz e velocizzare alcune parti della scrittura. L'uso dell'AI mi ha permesso di concentrarmi sulla parte di design e funzionalità, approfondendo comunque le mie competenze in JavaScript, DOM manipulation e localStorage.","img/quiz.png","progetti-portfolio/quizz-app/index.html"),

    new Progetto("MP3","Ho sviluppato un lettore musicale web utilizzando HTML, CSS e JavaScript che consente di cercare canzoni tramite l’API iTunes, riprodurle con controlli audio avanzati e gestire playlist personalizzate.Funzionalità principali:Ricerca canzoni con query testuale, usando JSONP per interrogare l’API pubblica iTunes.Visualizzazione dinamica di titolo, artista, copertina e anteprima audio del brano selezionato.Controlli audio completi: play/pause, avanti/indietro, loop, barra di avanzamento sincronizzata.Creazione e gestione di playlist personalizzate: aggiunta manuale di brani tramite form, visualizzazione interattiva e selezione brani per la riproduzione.Interfaccia utente semplice e responsive con icone di FontAwesome.","img/mp3.png","progetti-portfolio/music-player/index.html"),

    new Progetto("App Note","Questa è una semplice applicazione web per prendere e gestire note testuali direttamente nel browser. L’interfaccia è minimale e intuitiva, ideale per creare, modificare e cancellare note velocemente.Funzionalità principali:Creazione di nuove note: con un click si aggiunge una nuova nota modificabile direttamente sulla pagina.Modifica in tempo reale: le note sono editabili inline, senza bisogno di aprire moduli o finestre aggiuntive.Cancellazione singola e globale: ogni nota ha un’icona per eliminarla singolarmente, e c’è un pulsante per cancellare tutte le note insieme.Persistenza dati: le note sono salvate in localStorage, così rimangono disponibili anche dopo il refresh o la chiusura del browser.Animazioni per la rimozione: la cancellazione di note avviene con un’animazione fluida per una migliore esperienza utente.Tecnologie utilizzate:HTML5 e CSS per struttura e stile JavaScript puro per la gestione dinamica delle note e il salvataggio in localStorageFontAwesome per le icone intuitive e moderne","img/note.png","progetti-portfolio/note-app/index.html"),

    new Progetto ("QR Code Generator","Questa applicazione web permette di generare rapidamente un QR Code a partire da un testo o un link inserito dall’utente. Il design è pulito, moderno e responsive, con supporto per la modalità chiara e scura per migliorare l’esperienza utente in diversi ambienti di utilizzo.Funzionalità principali:Generazione QR Code dinamica: al click su \"Genera QR Code\" viene creato un QR Code aggiornato tramite l’API gratuita di qrserver.com, visualizzato in tempo reale.Download diretto: l’utente può scaricare il QR Code generato come immagine PNG con un semplice click sul link \"Scarica QR Code\".Validazione semplice: l’app avvisa se il campo di input è vuoto per evitare richieste inutili.Tema chiaro/scuro: toggle per passare facilmente tra modalità luce e buio, migliorando accessibilità e comfort visivo.Responsive design: adattabile a vari dispositivi, dal desktop al mobile, mantenendo leggibilità e usabilità.Tecnologie utilizzate:HTML5 e CSS3 (con variabili CSS e media queries) per struttura, stile e tema dinamico JavaScript puro per logica di generazione QR Code, toggle tema e gestione event API esterna (qrserver.com) per generazione QR Code on-demand senza bisogno di librerie aggiuntive","img/qr.png","progetti-portfolio/qr-code-generator/index.html"),

    new Progetto("Converti Valute","Ho sviluppato una web app di conversione valuta che permette agli utenti di selezionare due valute da dropdown popolate dinamicamente da un oggetto contenente i codici valuta e i relativi codici paese per le bandiere.Caratteristiche principali:Popolamento dinamico delle dropdown: Le liste di selezione “da” e “a” sono generate automaticamente a partire da un oggetto countryCodes che mappa ogni codice valuta (es. \"USD\") al corrispondente codice paese (es. \"US\"). Questo permette di gestire facilmente molte valute senza hardcoding.Visualizzazione bandiere: Al cambio di valuta selezionata, l’app aggiorna dinamicamente l’immagine della bandiera corrispondente al paese associato alla valuta, migliorando l’esperienza utente.Calcolo tasso di cambio: L’app usa un’API esterna per ottenere i tassi di cambio aggiornati e calcola l’importo convertito in tempo reale, con gestione di input errati (es. valore zero o vuoto).Scambio rapido delle valute: Un’icona consente di invertire le valute selezionate, aggiornando automaticamente bandiere e conversione.Tecnologie e metodi utilizzati:Manipolazione del DOM con querySelectorAll, eventi change e click.Creazione dinamica di elementi  per dropdown.Fetch API per chiamate asincrone e gestione JSON.Funzioni modulari per aggiornamento bandiere e calcolo conversioni.Uso di template string per URL e output testo.Questo progetto dimostra capacità nella gestione dinamica di interfacce utente, integrazione API esterne e attenzione all’usabilità visiva tramite l’uso di bandiere come riferimenti geografici.","img/converti.png","progetti-portfolio/currency-converter/index.html"),

    new Progetto("Pomodoro App","Pomodoro App Una semplice ma efficace applicazione web di timer Pomodoro, sviluppata in HTML, CSS e JavaScript, che aiuta a gestire il tempo e aumentare la produttività. L’interfaccia è composta da un timer visivo con cerchio animato SVG che si svuota progressivamente, e controlli intuitivi per avviare, mettere in pausa e resettare il countdown.Caratteristiche principali:Timer impostato di default su 25 minuti, con visualizzazione in formato MM:SS.Cerchio SVG animato che rappresenta visivamente il progresso del tempo restante.Suoni di feedback (tic) per migliorare l’interazione utente.Gestione dello stato timer (avvia, pausa, reset) con logica chiara e pulita in JavaScript.Notifica al termine del ciclo con messaggio di alert e suggerimento per una pausa.Focus su usabilità e accessibilità:Pulsanti ben etichettati e facilmente cliccabili.Aggiornamento costante e chiaro del timer per aiutare l’utente a seguire il tempo.Feedback sonoro discreto e opzionale per supportare diversi tipi di utenza.Codice semplice e commentato, facilmente estendibile e manutenibile.","img/pomodoro.png","progetti-portfolio/pomodoro-app/index.html"),

    new Progetto("Sasso Carta Forbici","Gioco Sasso Carta Forbici Un’interattiva applicazione web sviluppata in HTML, CSS e JavaScript che riproduce il classico gioco “Sasso, Carta, Forbici” con animazioni fluide e feedback visivo immediato. Caratteristiche principali:Interfaccia semplice e intuitiva con immagini cliccabili per selezionare la propria scelta.Animazione dinamica delle mani (movimento su e giù) durante la fase di “attesa” per aumentare il coinvolgimento utente.Logica di gioco implementata in JavaScript per determinare in modo corretto il vincitore o il pareggio.Visualizzazione del risultato con animazione di ingrandimento del testo per dare risalto al messaggio finale.Gestione dello stato di gioco per evitare clic multipli durante l’animazione, migliorando l’usabilità.Focus su esperienza utente:Feedback visivo e temporizzazione studiata per ricreare la tensione tipica del gioco reale.Uso di trasformazioni CSS per animare elementi in modo performante e gradevole.Codice modulare e ben commentato, facilmente mantenibile e ampliabile.","img/sasso.png","progetti-portfolio/rock-paper-scissor/index.html"),

    new Progetto("Shopping List","Lista della spesa dinamica in JavaScriptApplicazione web per gestire una lista della spesa interattiva, realizzata con HTML, CSS e JavaScript puro, pensata per facilitare l’organizzazione e il calcolo della spesa.Caratteristiche principali:Inserimento di prodotti con nome e prezzo tramite form con validazione dei dati per garantire correttezza degli input.Visualizzazione dinamica della lista prodotti con checkbox per marcare gli elementi come \"completati\" e pulsanti per eliminarli singolarmente.Aggiornamento in tempo reale del conteggio totale dei prodotti e calcolo della somma dei prezzi degli articoli non completati.Animazioni fluide per l’aggiunta di nuovi elementi e per evidenziare gli aggiornamenti di conteggio e totale spesa, migliorando l’esperienza utente.Gestione dello stato interno tramite array di oggetti per mantenere sincronizzati dati e interfaccia.Focus su esperienza utente e qualità del codice:Interfaccia chiara e responsive, con feedback visivo immediato sulle azioni dell’utente.Struttura modulare del codice con funzioni dedicate per ogni azione (aggiunta, eliminazione, aggiornamento totale), facilmente manutenibile e ampliabile.Uso di tecniche DOM avanzate per creare e manipolare dinamicamente gli elementi della lista.","img/shopping.png","progetti-portfolio/shopping-list/index.html"),

    new Progetto("Pokedex","Pokédex interattivo con API esterna (PokeAPI)Sviluppo di un’applicazione web responsive che simula un Pokédex, utilizzando HTML, CSS e JavaScript puro con chiamate API asincrone per ottenere dati in tempo reale.Caratteristiche principali:Interfaccia utente curata e personalizzata, con elementi grafici ispirati al design del Pokédex originale.Input testuale per ricerca Pokémon per nome, con gestione eventi per attivare la ricerca al tasto Invio.Utilizzo di fetch e async/await per chiamate all’API ufficiale PokeAPI e gestione degli errori (es. Pokémon non trovato).Visualizzazione dinamica di dati chiave come nome, punti vita (HP), peso, abilità e immagine frontale del Pokémon.Aggiornamento in tempo reale del DOM con dati estratti dall’API, garantendo un’esperienza utente fluida e interattiva.Tecnologie e competenze dimostrate:Manipolazione avanzata del DOM con JavaScript.Uso di API REST pubbliche con fetch asincrono e gestione degli errori.Capacità di creare UI dinamiche e responsive senza framework esterni.Attenzione all’accessibilità e user experience tramite input e feedback immediati.","img/poked.png","progetti-portfolio/pokedex/pokedex.html"),

    new Progetto("Odin Project Landing Page","Ho realizzato una landing page come esercizio pratico durante il corso The Odin Project, una piattaforma formativa gratuita focalizzata sullo sviluppo web full-stack.Dettagli del progetto:Struttura HTML semantica e ben organizzata, con divisioni chiare per header, contenuti principali, call to action e footer.Styling con CSS esterno (file landingpage.css) per gestione layout, tipografia e responsive design (anche se non incluso nel file HTML mostrato).Uso di elementi di interazione come pulsanti “Sign up” e link di navigazione.Realizzazione di un layout composto da sezioni con testi descrittivi, illustrazioni placeholder e citazioni/testimonial per simulare contenuti reali.Attenzione alla struttura visiva e gerarchia dei contenuti, come richiesto dal mockup del corso.Competenze sviluppate:Gestione completa di un progetto frontend, dall’HTML alla progettazione dell’interfaccia.Applicazione delle best practice di accessibilità e organizzazione semantica.Comprensione della logica di layout per landing page, con sezioni funzionali e call to action efficaci.Questo progetto è parte del mio percorso di formazione con The Odin Project, che mi ha permesso di acquisire solide basi per lo sviluppo web frontend.","img/landp.png","progetti-portfolio/odin-landing-page/landingpage.html")
]

const container = document.querySelector('#projects');
progetti.forEach(progetto => {
  container.innerHTML += progetto.render();
  const toggleBtn = document.getElementById('dark-toggle');
const body = document.body;

toggleBtn.addEventListener('click', () => {
  body.classList.toggle('dark');
    
  // Cambia icona del bottone a seconda del tema
  if (body.classList.contains('dark')) {
    toggleBtn.textContent = '☀️';
    document.querySelectorAll("p").forEach(p=>{
        p.style.color="#f8f9fa"
    })
    document.querySelectorAll(".content-box ").forEach(card=>{
          card.style.backgroundColor="#212529"
        })
    document.querySelectorAll(".card-title").forEach(p=>{
        p.style.color="#f8f9fa"})
  } else {
    toggleBtn.textContent = '🌙';
    document.querySelectorAll("p").forEach(p=>{
        p.style.color="#212529"
        document.querySelectorAll(".content-box ").forEach(card=>{
          card.style.backgroundColor="#f8f9fa"
        })
        document.querySelectorAll(".card-title").forEach(p=>{
        p.style.color="#212529"})
    })
  }

  // Salva la scelta in localStorage 
  if (body.classList.contains('dark')) {
    localStorage.setItem('theme', 'dark');
  } else {
    localStorage.setItem('theme', 'light');
  }
});

// All’avvio della pagina, controlla se c’è tema salvato
window.addEventListener('DOMContentLoaded', () => {
  const savedTheme = localStorage.getItem('theme');
  if (savedTheme === 'dark') {
    body.classList.add('dark');
    toggleBtn.textContent = '☀️';
  }
});
});